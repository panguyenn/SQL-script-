--SQL EXERCISE
--I. SIMPLE QUERIES / EXERCISE 1
SELECT
	EVENTNAME ,
	EVENTDATE
FROM
	TBLEVENT TE
ORDER BY
	EVENTDATE DESC;
--I. SIMPLE QUERIES / EXERCISE 2
SELECT
	TOP 5 EVENTID,
	EVENTNAME ,
	EVENTDETAILS
FROM
	TBLEVENT TE
ORDER BY
	EVENTDATE ASC;
--I. SIMPLE QUERIES / EXERCISE 3
SELECT
	TOP 3 CATEGORYID ,
	CATEGORYNAME
FROM
	TBLCATEGORY TC
ORDER BY
	CATEGORYNAME DESC ;
--I. SIMPLE QUERIES / EXERCISE 4
--2 FIRST EVENTS
SELECT
	TOP 2 EVENTNAME,
	EVENTDETAILS
FROM
	TBLEVENT TE
ORDER BY
	EVENTDATE ASC ;
--2 LAST EVENTS
SELECT
	TOP 2 EVENTNAME,
	EVENTDETAILS
FROM
	TBLEVENT TE
ORDER BY
	EVENTDATE DESC;
-- II. WHERE CLAUSE / EXERCISE 1
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	CATEGORYID = 11;
--II. WHERE CLAUSE / EXERCISE 2
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	YEAR(EVENTDATE) = 2005
	AND MONTH(EVENTDATE) = 2;
--II. WHERE CLAUSE / EXERCISE 3
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	EVENTNAME LIKE '%TELETUBBIES%'
	OR EVENTNAME LIKE '%PANDY%';
--II. WHERE CLAUSE / EXERCISE 4
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	(COUNTRYID IN (8, 22, 30, 35)
		OR EVENTDETAILS LIKE '%WATER%'
		OR CATEGORYID = 4)
	AND YEAR(EVENTDATE) >= 1970;
--II. WHERE CLAUSE / EXERCISE 5 
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	CATEGORYID != 14
	AND EVENTDETAILS LIKE '%TRAIN%';
--II. WHERE CLAUSE / EXERCISE 6
	SELECT
	*
FROM
	TBLEVENT TE
WHERE
	COUNTRYID = 13
	AND EVENTNAME NOT LIKE '%SPACE%'
	AND EVENTDETAILS NOT LIKE '%SPACE%';
--II. WHERE CLAUSE / EXERCISE 7
SELECT
	*
FROM
	TBLEVENT TE
WHERE
	CATEGORYID IN (5, 6)
	AND EVENTDETAILS NOT LIKE '%WAR%'
	AND EVENTDETAILS NOT LIKE '%DEATH%';
--III. BASIC JOIN / EXERCISE 1
SELECT
	TBLAUTHOR.AUTHORNAME,
	TBLEPISODE.TITLE,
	TBLEPISODE.EPISODETYPE
FROM
	TBLAUTHOR
INNER JOIN TBLEPISODE ON
	TBLAUTHOR.AUTHORID = TBLEPISODE.AUTHORID
WHERE
	TBLEPISODE.EPISODETYPE LIKE '%SPECIAL%'
ORDER BY
	TBLEPISODE.TITLE;
--III. BASIC JOIN / EXERCISE 2
SELECT
	TD.DOCTORNAME,
	TE.TITLE
FROM
	TBLEPISODE TE
LEFT JOIN TBLDOCTOR TD ON
	TE.DOCTORID = TD.DOCTORID
WHERE
	YEAR(TE.EPISODEDATE) = 2010;
--III. BASIC JOIN / EXERCISE 3
SELECT
	COUNTRYNAME,
	EVENTNAME,
	EVENTDATE
FROM
	TBLCOUNTRY TC
INNER JOIN TBLEVENT TE ON
	TC.COUNTRYID = TE.COUNTRYID
ORDER BY
	EVENTDATE;
--III. BASIC JOIN / EXERCISE 4
SELECT
	TE.EVENTNAME,
	TC.COUNTRYNAME,
	TC2.CONTINENTNAME
FROM
	TBLEVENT TE
LEFT JOIN TBLCOUNTRY TC ON
	TE.COUNTRYID = TC.COUNTRYID
LEFT JOIN TBLCONTINENT TC2 ON
	TC.CONTINENTID = TC2.CONTINENTID
WHERE
	TC.COUNTRYNAME = 'RUSSIA'
	OR TC2.CONTINENTNAME = 'ANTARCTIC';
--III. BASIC JOIN / EXERCISE 5
--INNER JOIN
SELECT
	EVENTNAME,
	EVENTDATE,
	TC.CATEGORYNAME
FROM
	TBLEVENT TE
INNER JOIN TBLCATEGORY TC ON
	TE.CATEGORYID = TC.CATEGORYID;
--FULL OUTER JOIN
SELECT
	EVENTNAME,
	EVENTDATE,
	TC.CATEGORYNAME
FROM
	TBLEVENT TE
FULL OUTER JOIN TBLCATEGORY TC ON
	TE.CATEGORYID = TC.CATEGORYID
WHERE
	EVENTID IS NULL;
--III. BASIC JOIN / EXERCISE 6
SELECT
	TITLE,
	AUTHORNAME,
	ENEMYNAME
FROM
	TBLEPISODE TE
INNER JOIN TBLAUTHOR TA ON
	TE.AUTHORID = TA.AUTHORID
INNER JOIN TBLEPISODEENEMY TEE ON
	TE.EPISODEID = TEE.EPISODEID
INNER JOIN TBLENEMY TE2 ON
	TEE.ENEMYID = TE2.ENEMYID
WHERE
	TE2.ENEMYNAME = 'DALEKS';
--III. BASIC JOIN / EXERCISE 7
SELECT
	TA.AUTHORNAME ,
	LEN(TA.AUTHORNAME),
	TE.TITLE ,
	LEN(TE.TITLE),
	TD.DOCTORNAME ,
	LEN(TD.DOCTORNAME),
	TE2.ENEMYNAME ,
	LEN(TE2.ENEMYNAME),
	LEN(TA.AUTHORNAME) + LEN(TE.TITLE) + LEN(TD.DOCTORNAME) + LEN(TE2.ENEMYNAME) AS [LENGTH]
FROM
	TBLEPISODE TE
INNER JOIN TBLAUTHOR TA ON
	TE.AUTHORID = TA.AUTHORID
INNER JOIN TBLDOCTOR TD ON 
	TE.DOCTORID = TD.DOCTORID
INNER JOIN TBLEPISODEENEMY TEE ON
	TE.EPISODEID = TEE.EPISODEID
INNER JOIN TBLENEMY TE2 ON
	TEE.ENEMYID = TE2.ENEMYID
WHERE
	LEN(TA.AUTHORNAME) + LEN(TE.TITLE) + LEN(TD.DOCTORNAME) + LEN(TE2.ENEMYNAME) < 40;
--III. BASIC JOIN / EXERCISE 8
SELECT
	*
FROM
	TBLCOUNTRY TC
FULL OUTER JOIN TBLEVENT TE ON
	TC.COUNTRYID = TE.COUNTRYID
WHERE
	TE.EVENTID IS NULL;
--IV. AGGREGATION AND GROUPING / EXERCISE 1
SELECT
	TA.AUTHORNAME,
	COUNT(DISTINCT EPISODEID) AS [COUNT EPISODE],
	MIN(EPISODEDATE) AS [EARLIEST EPISODE DATE],
	MAX(EPISODEDATE) AS [LATEST EPISODE DATE]
FROM
	TBLEPISODE TE
INNER JOIN TBLAUTHOR TA ON
	TE.AUTHORID = TA.AUTHORID
GROUP BY
	TA.AUTHORNAME
ORDER BY
	COUNT(DISTINCT EPISODEID) DESC;
--IV. AGGREGATION AND GROUPING / EXERCISE 2
SELECT
	TC.CATEGORYNAME ,
	COUNT(DISTINCT TE.EVENTID) AS [COUNT EVENT]
FROM
	TBLCATEGORY TC
LEFT JOIN TBLEVENT TE ON
	TC.CATEGORYID = TE.CATEGORYID
GROUP BY
	TC.CATEGORYNAME
ORDER BY
	COUNT(DISTINCT TE.EVENTID) DESC;
--IV. AGGREGATION AND GROUPING / EXERCISE 3
SELECT
	COUNT(DISTINCT EVENTID) AS [NUMBER OF EVENTS],
	MIN(EVENTDATE) AS [FIRST DATE],
	MAX(EVENTDATE) AS [LAST DATE]
FROM
	TBLEVENT TE;
--IV. AGGREGATION AND GROUPING / EXERCISE 4
SELECT
	TC2.CONTINENTNAME ,
	TC.COUNTRYNAME ,
	COUNT(DISTINCT TE.EVENTID) AS [NUMBER OF EVENTS]
FROM
	TBLEVENT TE
INNER JOIN TBLCOUNTRY TC ON
	TE.COUNTRYID = TC.COUNTRYID
INNER JOIN TBLCONTINENT TC2 ON
	TC2.CONTINENTID = TC.CONTINENTID
GROUP BY
	TC2.CONTINENTNAME ,
	TC.COUNTRYNAME;
--IV. AGGREGATION AND GROUPING / EXERCISE 5
SELECT
	TA.AUTHORNAME ,
	TD.DOCTORNAME ,
	COUNT(DISTINCT TE.EPISODEID) AS [NUMBER OF EPISODES]
FROM
	TBLEPISODE TE
INNER JOIN TBLAUTHOR TA ON
	TE.AUTHORID = TA.AUTHORID
INNER JOIN TBLDOCTOR TD ON
	TE.DOCTORID = TD.DOCTORID
GROUP BY
	TA.AUTHORNAME ,
	TD.DOCTORNAME
HAVING
	COUNT(DISTINCT TE.EPISODEID) > 5
ORDER BY
	COUNT(DISTINCT TE.EPISODEID) DESC;
--IV. AGGREGATION AND GROUPING / EXERCISE 6
SELECT
	YEAR(TE.EPISODEDATE) AS [EPISODE YEAR],
	TE2.ENEMYNAME,
	COUNT(DISTINCT TE.EPISODEID) AS [EPISODES]
FROM
	TBLEPISODE TE
INNER JOIN TBLEPISODEENEMY TEE ON
	TE.EPISODEID = TEE.EPISODEID
INNER JOIN TBLENEMY TE2 ON
	TEE.ENEMYID = TE2.ENEMYID
INNER JOIN TBLDOCTOR TD ON 
	TE.DOCTORID = TD.DOCTORID
WHERE
	YEAR(TD.BIRTHDATE) < 1970
GROUP BY
	YEAR(TE.EPISODEDATE) ,
	TE2.ENEMYNAME
HAVING 
	COUNT(DISTINCT TE.EPISODEID) > 1
ORDER BY 
	COUNT(DISTINCT TE.EPISODEID) DESC;
--IV. AGGREGATION AND GROUPING / EXERCISE 7
SELECT
	LEFT(TC.CATEGORYNAME,
	1),
	COUNT(DISTINCT TE.EVENTID) AS [NUMBER OF EVENTS],
	AVG(LEN(EVENTNAME)) AS [AVERAGE EVENT NAME LENGTH]
FROM
	TBLEVENT TE
INNER JOIN TBLCATEGORY TC ON
	TE.CATEGORYID = TC.CATEGORYID
GROUP BY
	LEFT(TC.CATEGORYNAME,
	1)
ORDER BY 
	AVG(LEN(EVENTNAME)) DESC;
--IV. AGGREGATION AND GROUPING / EXERCISE 8
SELECT
	CONCAT(1 + (YEAR(EVENTDATE) - 1) / 100,  
		CASE WHEN RIGHT(1 + (YEAR(EVENTDATE) - 1) / 100, 1) = 1 
			 THEN 'ST'
			 WHEN RIGHT(1 + (YEAR(EVENTDATE) - 1) / 100, 1) = 2
			 THEN ' ND'
			 WHEN RIGHT(1 + (YEAR(EVENTDATE) - 1) / 100, 1) = 3 
			 THEN ' RD'
			 ELSE 'TH'
			 END,
		' CENTURY')
	AS CENTURY,
	COUNT(DISTINCT EVENTID) AS [NUMBER OF EVENTS]
FROM
	TBLEVENT TE
GROUP BY
	1 + (YEAR(EVENTDATE) - 1) / 100;

SQL ANSWERS
--V. CALCULATIONS / EXERCISE 1
SELECT
	EVENTNAME,
	LEN(EVENTNAME) AS 'LENGTH_NAME'
FROM
	TBLEVENT TE
ORDER BY
	LEN(EVENTNAME) ASC;
--V. CALCULATIONS / EXERCISE 2
SELECT
	EVENTNAME ,
	CATEGORYID ,
	CONCAT(EVENTNAME, ' (CATEGORY ', CATEGORYID, ')') AS [EVENT(CATEGORY)]
FROM
	TBLEVENT;
--V. CALCULATIONS / EXERCISE 3
SELECT 
	CONTINENTID,
	CONTINENTNAME, 
	SUMMARY,
	ISNULL(SUMMARY,
	'NO SUMMARY') AS [ISNULL], 
	COALESCE(SUMMARY,
	'NO SUMMARY') AS [COALESCE],
	CASE
		WHEN SUMMARY IS NULL THEN 'NO SUMMARY'
		ELSE SUMMARY
	END AS [CASE WHEN]
FROM 
	TBLCONTINENT TC;
--V. CALCULATIONS / EXERCISE 4
SELECT
	COUNTRYNAME,
	COUNTRYID ,
	CONTINENTID ,
	CASE
		WHEN CONTINENTID IN (1, 3) THEN 'EURASIA'
		WHEN CONTINENTID IN (5, 6) THEN 'AMERICAS'
		WHEN CONTINENTID IN (2, 4) THEN 'SOMEWHERE HOT'
		WHEN CONTINENTID = 7 THEN 'SOMEWHERE COLD'
		ELSE 'SOMEWHERE ELSE'
	END AS COUNTRYLOCATION
FROM
	TBLCOUNTRY TC;
--V. CALCULATIONS / EXERCISE 5
SELECT
	COUNTRY, 
	   KMSQUARED,
	   KMSQUARED % 20761 AS AREALEFTOVER,
	ROUND(KMSQUARED / 20761, 0) AS WALESUNITS, 
	   CONCAT(ROUND(KMSQUARED / 20761, 0), ' X WALES PLUS ', KMSQUARED % 20761, ' SQ. KM') AS WALESCOMPARISON
FROM
	COUNTRIESBYAREA CBA
ORDER BY
	ABS(KMSQUARED - 20761) ASC
	--V. CALCULATIONS / EXERCISE 6
SELECT
	EVENTNAME,
	LEFT(EVENTNAME,
	1),
	RIGHT(EVENTNAME,
	1)
FROM
	TBLEVENT TE
WHERE
	LEFT(EVENTNAME,
	1) IN ('U', 'E', 'O', 'A', 'I')
	AND RIGHT(EVENTNAME,
	1) IN ('U', 'E', 'O', 'A', 'I');
--V. CALCULATIONS / EXERCISE 7
SELECT
	EVENTNAME
FROM
	TBLEVENT TE
WHERE
	LEFT(EVENTNAME,
	1) = RIGHT(EVENTNAME,
	1);
--V. CALCULATIONS USING DATES / EXERCISE 1
SELECT
	EVENTDATE,
	FORMAT(EVENTDATE,
	'DD/MM/YYYY') AS 'FORMAT DATE'
FROM
	TBLEVENT TE
WHERE
	YEAR(EVENTDATE) = 2002;
--V. CALCULATIONS USING DATES / EXERCISE 2
SELECT
	EVENTNAME ,
	EVENTDATE ,
	DATEDIFF(DAY, '2002-11-16', EVENTDATE) AS [DATEDIFF],
	ABS(DATEDIFF(DAY, '2002-11-16', EVENTDATE)) AS [ABS]
FROM
	TBLEVENT TE
ORDER BY
	ABS(DATEDIFF(DAY, EVENTDATE, CAST('2002-11-16' AS DATE))) ASC;
--V. CALCULATIONS USING DATES / EXERCISE 3
--EVENT DATE 13
SELECT
	EVENTNAME,
	EVENTDATE,
	DATENAME(WEEKDAY, EVENTDATE) AS [DAY OF WEEK],
	DATEPART(DAY, EVENTDATE) AS [DAY NUMBER]
FROM
	TBLEVENT TE
WHERE 
	DATENAME(WEEKDAY, EVENTDATE) = 'FRIDAY'
	AND DATEPART(DAY, EVENTDATE) = 13;
--EVENT DATE 12
SELECT
	EVENTNAME,
	EVENTDATE,
	DATENAME(WEEKDAY, EVENTDATE) AS [DAY OF WEEK],
	DATEPART(DAY, EVENTDATE) AS [DAY NUMBER]
FROM
	TBLEVENT TE
WHERE 
	DATENAME(WEEKDAY, EVENTDATE) = 'THURSDAY'
	AND DATEPART(DAY, EVENTDATE) = 12;
--EVENT DATE 14
SELECT
	EVENTNAME,
	EVENTDATE,
	DATENAME(WEEKDAY, EVENTDATE) AS [DAY OF WEEK],
	DATEPART(DAY, EVENTDATE) AS [DAY NUMBER]
FROM
	TBLEVENT TE
WHERE 
	DATENAME(WEEKDAY, EVENTDATE) = 'SATURDAY'
	AND DATEPART(DAY, EVENTDATE) = 14;
--V. CALCULATIONS USING DATES / EXERCISE 4
SELECT
	EVENTNAME AS [EVENT NAME],
	CONCAT(DATENAME(WEEKDAY, EVENTDATE), ' ', 
	CASE 
        WHEN DATEPART(DAY, EVENTDATE) IN (1, 21, 31) 
       		THEN CONVERT(VARCHAR, DATEPART(DAY, EVENTDATE))+ 'ST'
       	WHEN DATEPART(DAY, EVENTDATE) IN (2, 22) 
       		THEN CONVERT(VARCHAR, DATEPART(DAY, EVENTDATE))+ 'ND'
       	WHEN DATEPART(DAY, EVENTDATE) IN (3, 23) 
	        THEN CONVERT(VARCHAR, DATEPART(DAY, EVENTDATE))+ 'RD'
        ELSE CONVERT(VARCHAR, DATEPART(DAY, EVENTDATE)) + 'TH'
        END , ' ' 
        , DATENAME(MONTH, EVENTDATE) , ' ' 
        , YEAR(EVENTDATE)) AS [FULL DATE]
FROM
	TBLEVENT TE;
--VI. SUBQUERIES / EXERCISE 1
SELECT
	EVENTNAME,
	EVENTDATE
FROM
	TBLEVENT TE
WHERE
	EVENTDATE > 
(
	SELECT
		MAX(EVENTDATE)
	FROM
		TBLEVENT TE
	WHERE
		COUNTRYID = 21)
ORDER BY
	EVENTDATE DESC;
--VI. SUBQUERIES / EXERCISE 2
SELECT
	EVENTNAME,
	LEN(EVENTNAME) AS [NAME LENGTH]
FROM
	TBLEVENT TE2
WHERE
	LEN(EVENTNAME) >
(
	SELECT
		AVG(LEN(EVENTNAME)) AS [AVG LENGTH]
	FROM
		TBLEVENT TE)
ORDER BY
	LEN(EVENTNAME) DESC;
--VI. SUBQUERIES / EXERCISE 3
SELECT
	TC4.CONTINENTNAME ,
	EVENTNAME
FROM
	TBLEVENT TE2
INNER JOIN TBLCOUNTRY TC3 ON
	TE2.COUNTRYID = TC3.COUNTRYID
INNER JOIN TBLCONTINENT TC4 ON
	TC3.CONTINENTID = TC4.CONTINENTID
WHERE
	TC4.CONTINENTNAME IN (
	SELECT
		TOP 3 TC2.CONTINENTNAME
	FROM
		TBLEVENT TE
	INNER JOIN TBLCOUNTRY TC ON
		TE.COUNTRYID = TC.COUNTRYID
	INNER JOIN TBLCONTINENT TC2 ON
		TC.CONTINENTID = TC2.CONTINENTID
	GROUP BY
		TC2.CONTINENTNAME
	ORDER BY
		COUNT(DISTINCT EVENTID) ASC);
--VI. SUBQUERIES / EXERCISE 4
SELECT
	A.COUNTRYNAME
FROM
	TBLCOUNTRY A
INNER JOIN 
(
	SELECT
		TE.COUNTRYID,
		COUNT(DISTINCT TE.EVENTID) AS COUNTD_EVENT
	FROM
		TBLEVENT TE
	GROUP BY
		TE.COUNTRYID
	HAVING
		COUNT(DISTINCT TE.EVENTID) > 8) B ON
	A.COUNTRYID = B.COUNTRYID;
--VI. SUBQUERIES / EXERCISE 5
SELECT
	EVENTNAME,
	EVENTID
FROM
	TBLEVENT TE
WHERE
	COUNTRYID NOT IN (
	SELECT
		TOP 30 COUNTRYID
	FROM
			TBLCOUNTRY TC
	ORDER BY
			COUNTRYNAME DESC)
	AND CATEGORYID NOT IN (
	SELECT
		TOP 15 CATEGORYID
	FROM
			TBLCATEGORY TC2
	ORDER BY
			CATEGORYNAME DESC);
--VII. CTE / EXERCISE 1
WITH THISANDTHAT AS (
SELECT
	E.EVENTID,
	CASE
		WHEN E.EVENTDETAILS LIKE '%THIS%' THEN 1
		ELSE 0
	END AS IFTHIS,
	CASE
		WHEN E.EVENTDETAILS LIKE '%THAT%' THEN 1
		ELSE 0
	END AS IFTHAT
FROM
	TBLEVENT AS E
)
,
FIRSTRESULTS AS (
SELECT
	T.IFTHIS,
	T.IFTHAT,
	COUNT(*) AS 'NUMBER OF EVENTS'
FROM
	THISANDTHAT AS T
GROUP BY
	T.IFTHIS,
	T.IFTHAT
)
SELECT
	E.EVENTNAME,
	E.EVENTDETAILS
FROM
	TBLEVENT AS E
INNER JOIN THISANDTHAT AS T ON
	E.EVENTID = T.EVENTID
WHERE
	IFTHIS = 1
	AND IFTHAT = 1;
--VII. CTE / EXERCISE 2
WITH LETTERNAME AS
(
SELECT
		EVENTNAME,
		COUNTRYID
FROM
		TBLEVENT
WHERE
		EVENTNAME LIKE '%[N-Z]') 
SELECT 
	EVENTNAME,
	COUNTRYNAME
FROM 
	LETTERNAME
INNER JOIN 
	TBLCOUNTRY C ON
	LETTERNAME.COUNTRYID = C.COUNTRYID;
--VII. CTE / EXERCISE 3
WITH MPEPISODES AS (
SELECT
	E.EPISODEID
FROM
	TBLEPISODE AS E
INNER JOIN TBLAUTHOR AS A ON
	E.AUTHORID = A.AUTHORID
WHERE
	A.AUTHORNAME LIKE '%MP%'
)
SELECT
	DISTINCT
	C.COMPANIONNAME
FROM 
	MPEPISODES AS E
INNER JOIN TBLEPISODECOMPANION AS EC ON
	E.EPISODEID = EC.EPISODEID
INNER JOIN TBLCOMPANION AS C ON
	EC.COMPANIONID = C.COMPANIONID
ORDER BY
	C.COMPANIONNAME;
--VII. CTE / EXERCISE 4
WITH NONOWLEVENTS AS (
SELECT
		E.EVENTID,
		E.EVENTNAME,
		E.EVENTDATE,
		E.COUNTRYID,
		E.CATEGORYID
FROM
		TBLEVENT AS E
WHERE
		E.EVENTDETAILS NOT LIKE '%O%'
	AND
		E.EVENTDETAILS NOT LIKE '%W%'
	AND
		E.EVENTDETAILS NOT LIKE '%L%' 
)
,
OTHEREVENTSINNONOWLCOUNTRIES AS (
SELECT
	DISTINCT
		C.COUNTRYNAME,
		E.EVENTNAME,
		E.CATEGORYID
FROM
		NONOWLEVENTS AS NOE
INNER JOIN TBLCOUNTRY AS C
			ON
	NOE.COUNTRYID = C.COUNTRYID
INNER JOIN TBLEVENT AS E
			ON
	NOE.COUNTRYID = E.COUNTRYID
)
SELECT
	DISTINCT
	E.EVENTNAME,
	E.EVENTDATE,
	C.CATEGORYNAME,
	CY.COUNTRYNAME
FROM
	OTHEREVENTSINNONOWLCOUNTRIES AS OTHER
INNER JOIN TBLCATEGORY AS C
		ON
	OTHER.CATEGORYID = C.CATEGORYID
INNER JOIN TBLEVENT AS E
		ON
	C.CATEGORYID = E.CATEGORYID
INNER JOIN TBLCOUNTRY AS CY
		ON
	E.COUNTRYID = CY.COUNTRYID
ORDER BY
	E.EVENTDATE;
--VII. CTE / EXERCISE 5
WITH EVENTSBYERA AS (
SELECT
	CASE
		WHEN YEAR(E.EVENTDATE) < 1900 THEN '19TH CENTURY AND EARLIER'
		WHEN YEAR(E.EVENTDATE) < 2000 THEN '20TH CENTURY'
		ELSE '21ST CENTURY'
	END AS ERA,
		E.EVENTID
FROM
	TBLEVENT AS E
)
SELECT 
	E.ERA,
	COUNT(*) AS 'NUMBER OF EVENTS'
FROM 
	EVENTSBYERA AS E
GROUP BY 
	E.ERA;
